// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mmrcis.Data;

#nullable disable

namespace mmrcis.Migrations
{
    [DbContext(typeof(CisDbContext))]
    [Migration("20250615071503_ModelRefactorToSupportPatientAndIncomeBill")]
    partial class ModelRefactorToSupportPatientAndIncomeBill
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("mmrcis.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonID")
                        .IsUnique()
                        .HasFilter("[PersonID] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("mmrcis.Models.Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorStaffID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("DoctorStaffID");

                    b.HasIndex("PatientID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("mmrcis.Models.ClinicDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("DocumentContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TransactionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TransactionID");

                    b.ToTable("ClinicDocuments");
                });

            modelBuilder.Entity("mmrcis.Models.CostRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccountCode")
                        .HasColumnType("int");

                    b.Property<decimal>("CostAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CostCode")
                        .HasColumnType("int");

                    b.Property<string>("CostType")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("IorE")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime>("RegisteredSince")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AccountCode")
                        .IsUnique()
                        .HasFilter("[AccountCode] IS NOT NULL");

                    b.HasIndex("CostCode")
                        .IsUnique();

                    b.ToTable("CostRates");
                });

            modelBuilder.Entity("mmrcis.Models.ExpenseBill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVoided")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("OperatorID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ID");

                    b.HasIndex("OperatorID");

                    b.HasIndex("PatientID");

                    b.ToTable("ExpenseBills");
                });

            modelBuilder.Entity("mmrcis.Models.ExpenseBillItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CostCode")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseBillID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CostCode");

                    b.HasIndex("ExpenseBillID");

                    b.ToTable("ExpenseBillItems");
                });

            modelBuilder.Entity("mmrcis.Models.IncomeBill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("bit");

                    b.Property<int>("OperatorID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ID");

                    b.HasIndex("OperatorID");

                    b.HasIndex("PatientID");

                    b.ToTable("IncomeBills");
                });

            modelBuilder.Entity("mmrcis.Models.IncomeBillItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CostCode")
                        .HasColumnType("int");

                    b.Property<int>("IncomeBillID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CostCode");

                    b.HasIndex("IncomeBillID");

                    b.ToTable("IncomeBillItems");
                });

            modelBuilder.Entity("mmrcis.Models.InventoryItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("CurrentStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinStockLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RegisteredSince")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("SupplierID");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("mmrcis.Models.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("PatientSince")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("mmrcis.Models.PatientCheckinOut", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CIN_TIME")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("COUT_TIME")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsBilled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsServed")
                        .HasColumnType("bit");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientVitalID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PatientVitalID");

                    b.ToTable("PatientCheckinOuts");
                });

            modelBuilder.Entity("mmrcis.Models.PatientDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("DocumentContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientDocuments");
                });

            modelBuilder.Entity("mmrcis.Models.PatientLabRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("IncomeBillID")
                        .HasColumnType("int");

                    b.Property<bool>("IsCollected")
                        .HasColumnType("bit");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("IncomeBillID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientLabRecords");
                });

            modelBuilder.Entity("mmrcis.Models.PatientVital", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal?>("BP")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("OperatorID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Oximeter")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<decimal?>("RespRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("ID");

                    b.HasIndex("OperatorID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientVitals");
                });

            modelBuilder.Entity("mmrcis.Models.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("IncomeBillID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReceivedByOperatorID")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("IncomeBillID");

                    b.HasIndex("ReceivedByOperatorID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("mmrcis.Models.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Allergy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Qualification")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RegisteredSince")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sex")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("mmrcis.Models.PostingTransaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AccountCode")
                        .HasColumnType("int");

                    b.Property<int?>("CheckedPersonID")
                        .HasColumnType("int");

                    b.Property<int?>("OperatorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ID");

                    b.HasIndex("AccountCode");

                    b.HasIndex("CheckedPersonID");

                    b.HasIndex("OperatorID");

                    b.ToTable("PostingTransactions");
                });

            modelBuilder.Entity("mmrcis.Models.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredSince")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("mmrcis.Models.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegisteredSince")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("mmrcis.Models.TicketFooter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HeaderLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HeaderLine2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HeaderLine3")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LabOPD")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("TicketFooters");
                });

            modelBuilder.Entity("mmrcis.Models.TicketHeader", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HeaderLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HeaderLine2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HeaderLine3")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LabOPD")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("TicketHeaders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("mmrcis.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("mmrcis.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("mmrcis.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("mmrcis.Models.ApplicationUser", b =>
                {
                    b.HasOne("mmrcis.Models.Person", "Person")
                        .WithOne()
                        .HasForeignKey("mmrcis.Models.ApplicationUser", "PersonID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("mmrcis.Models.Appointment", b =>
                {
                    b.HasOne("mmrcis.Models.Person", "DoctorStaff")
                        .WithMany()
                        .HasForeignKey("DoctorStaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DoctorStaff");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("mmrcis.Models.ClinicDocument", b =>
                {
                    b.HasOne("mmrcis.Models.PostingTransaction", "PostingTransaction")
                        .WithMany("ClinicDocuments")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PostingTransaction");
                });

            modelBuilder.Entity("mmrcis.Models.ExpenseBill", b =>
                {
                    b.HasOne("mmrcis.Models.Person", "Operator")
                        .WithMany("ExpenseBillsAsOperator")
                        .HasForeignKey("OperatorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.Patient", "Patient")
                        .WithMany("ExpenseBills")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Operator");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("mmrcis.Models.ExpenseBillItem", b =>
                {
                    b.HasOne("mmrcis.Models.CostRate", "CostRate")
                        .WithMany("ExpenseBillItems")
                        .HasForeignKey("CostCode")
                        .HasPrincipalKey("CostCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.ExpenseBill", "ExpenseBill")
                        .WithMany("ExpenseBillItems")
                        .HasForeignKey("ExpenseBillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostRate");

                    b.Navigation("ExpenseBill");
                });

            modelBuilder.Entity("mmrcis.Models.IncomeBill", b =>
                {
                    b.HasOne("mmrcis.Models.Person", "Operator")
                        .WithMany("IncomeBillsAsCreatedByOperator")
                        .HasForeignKey("OperatorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.Patient", "Patient")
                        .WithMany("IncomeBills")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Operator");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("mmrcis.Models.IncomeBillItem", b =>
                {
                    b.HasOne("mmrcis.Models.CostRate", "CostRate")
                        .WithMany("IncomeBillItems")
                        .HasForeignKey("CostCode")
                        .HasPrincipalKey("CostCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.IncomeBill", "IncomeBill")
                        .WithMany("IncomeBillItems")
                        .HasForeignKey("IncomeBillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostRate");

                    b.Navigation("IncomeBill");
                });

            modelBuilder.Entity("mmrcis.Models.InventoryItem", b =>
                {
                    b.HasOne("mmrcis.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("mmrcis.Models.Patient", b =>
                {
                    b.HasOne("mmrcis.Models.Person", "Person")
                        .WithOne("PatientProfile")
                        .HasForeignKey("mmrcis.Models.Patient", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("mmrcis.Models.PatientCheckinOut", b =>
                {
                    b.HasOne("mmrcis.Models.Person", "Doctor")
                        .WithMany("PatientCheckinOutsAsDoctor")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("mmrcis.Models.Patient", "Patient")
                        .WithMany("PatientCheckinOuts")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.PatientVital", "PatientVital")
                        .WithMany()
                        .HasForeignKey("PatientVitalID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("PatientVital");
                });

            modelBuilder.Entity("mmrcis.Models.PatientDocument", b =>
                {
                    b.HasOne("mmrcis.Models.Patient", "Patient")
                        .WithMany("PatientDocuments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("mmrcis.Models.PatientLabRecord", b =>
                {
                    b.HasOne("mmrcis.Models.Person", "Doctor")
                        .WithMany("PatientLabRecordsAsDoctor")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.IncomeBill", "IncomeBill")
                        .WithMany("PatientLabRecords")
                        .HasForeignKey("IncomeBillID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.Patient", "Patient")
                        .WithMany("PatientLabRecords")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("IncomeBill");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("mmrcis.Models.PatientVital", b =>
                {
                    b.HasOne("mmrcis.Models.Person", "Operator")
                        .WithMany("PatientVitalsAsOperator")
                        .HasForeignKey("OperatorID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("mmrcis.Models.Patient", "Patient")
                        .WithMany("PatientVitals")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("mmrcis.Models.Payment", b =>
                {
                    b.HasOne("mmrcis.Models.IncomeBill", "IncomeBill")
                        .WithMany("Payments")
                        .HasForeignKey("IncomeBillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mmrcis.Models.Person", "ReceivedByOperator")
                        .WithMany("PaymentsAsReceivedByOperator")
                        .HasForeignKey("ReceivedByOperatorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("IncomeBill");

                    b.Navigation("ReceivedByOperator");
                });

            modelBuilder.Entity("mmrcis.Models.PostingTransaction", b =>
                {
                    b.HasOne("mmrcis.Models.CostRate", "CostRate")
                        .WithMany("PostingTransactions")
                        .HasForeignKey("AccountCode")
                        .HasPrincipalKey("AccountCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("mmrcis.Models.Person", "CheckedPerson")
                        .WithMany("PostingTransactionsAsCheckedPerson")
                        .HasForeignKey("CheckedPersonID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("mmrcis.Models.Person", "Operator")
                        .WithMany("PostingTransactionsAsOperator")
                        .HasForeignKey("OperatorID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CheckedPerson");

                    b.Navigation("CostRate");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("mmrcis.Models.CostRate", b =>
                {
                    b.Navigation("ExpenseBillItems");

                    b.Navigation("IncomeBillItems");

                    b.Navigation("PostingTransactions");
                });

            modelBuilder.Entity("mmrcis.Models.ExpenseBill", b =>
                {
                    b.Navigation("ExpenseBillItems");
                });

            modelBuilder.Entity("mmrcis.Models.IncomeBill", b =>
                {
                    b.Navigation("IncomeBillItems");

                    b.Navigation("PatientLabRecords");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("mmrcis.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ExpenseBills");

                    b.Navigation("IncomeBills");

                    b.Navigation("PatientCheckinOuts");

                    b.Navigation("PatientDocuments");

                    b.Navigation("PatientLabRecords");

                    b.Navigation("PatientVitals");
                });

            modelBuilder.Entity("mmrcis.Models.Person", b =>
                {
                    b.Navigation("ExpenseBillsAsOperator");

                    b.Navigation("IncomeBillsAsCreatedByOperator");

                    b.Navigation("PatientCheckinOutsAsDoctor");

                    b.Navigation("PatientLabRecordsAsDoctor");

                    b.Navigation("PatientProfile");

                    b.Navigation("PatientVitalsAsOperator");

                    b.Navigation("PaymentsAsReceivedByOperator");

                    b.Navigation("PostingTransactionsAsCheckedPerson");

                    b.Navigation("PostingTransactionsAsOperator");
                });

            modelBuilder.Entity("mmrcis.Models.PostingTransaction", b =>
                {
                    b.Navigation("ClinicDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
